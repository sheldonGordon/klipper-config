################
###  Macros  ###
################

#Merci a Guilouz (https://github.com/Guilouz/Klipper-Flsun-Speeder-Pad) pour les macro suivante.
#UNLOAD_FILAMENT
#LOAD_FILAMENT
#PID_BED_65
#PID_HOTEND_220
#ADXL_TEST
#ADXL_NOISE
#ADXL_AXE_X
#ADXL_AXE_Y
#SAVE
#M201
#M203
#M204
#M205

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    ;Put printing message on LCD screen
    M117 Heating... 
    # Start bed heating
    M140 S{BED_TEMP}
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Run Bed leveling
    BED_MESH_PROFILE LOAD=pei_face1

    G1 Z5.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Run Cura start Gcode to clean nozzle
    G92 E0 ; reset extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
    G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position
    G1 X2 Y200.0 Z0.3 F1500.0 E15 ; draw 1st line
    G1 X2 Y200.0 Z0.4 F5000.0 ; move to side a little
    G1 X2 Y20 Z0.4 F1500.0 E30 ; draw 2nd line
    G92 E0 ; reset extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface

[gcode_macro END_PRINT]
gcode:
    M104 T0 S0
    M104 T1 S0
    M140 S0
    G92 E1
    G1 E-1 F300
    G28 X0 Y0
    M84

[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE
 
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state

##################################################
# Chargement / Retrait du filament
##################################################

[gcode_macro UNLOAD_FILAMENT]
description: Retrait du filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  SAVE_GCODE_STATE NAME=unload_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Chauffe..."
  M109 S200
  {% endif %}
  RESPOND MSG="Retrait du filament..."
  G91
  G0 E2 F400
  G0 E-5 F800
  G0 E-70 F800
  RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Chargement du filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  SAVE_GCODE_STATE NAME=load_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Chauffe..."
  M109 S200
  {% endif %}
  RESPOND MSG="Chargement du filament..."
  G91
  G0 E70 F300
  G0 E20 F200
  M400
  RESTORE_GCODE_STATE NAME=load_state
  {% endif %}

######################################################################
# Déclaration Macro Extrudeur T0 et T1
######################################################################

[gcode_macro T0]
gcode:
	SYNC_EXTRUDER_MOTION EXTRUDER="extruder" MOTION_QUEUE="extruder"
	SYNC_EXTRUDER_MOTION EXTRUDER="belted_extruder" MOTION_QUEUE=""
	SAVE_VARIABLE VARIABLE=active_tool VALUE='"T0"'

[gcode_macro T1]
gcode:
	SYNC_EXTRUDER_MOTION EXTRUDER="extruder" MOTION_QUEUE=""
	SYNC_EXTRUDER_MOTION EXTRUDER="belted_extruder" MOTION_QUEUE="extruder"
	SAVE_VARIABLE VARIABLE=active_tool VALUE='"T1"'

[delayed_gcode STARTUP_GCODE]
initial_duration: 0.1
gcode:
	{% set svv = printer.save_variables.variables %}
	ACTIVATE_EXTRUDER extruder={svv.currentextruder}
	{ action_respond_info("Current extruder: " + svv.currentextruder) }

[gcode_macro ACTIVATE_EXTRUDER]
description: Replaces built-in macro for a X-in, 1-out extruder configuration SuperSlicer fix
rename_existing: ACTIVATE_EXTRUDER_BASE
gcode:
    {% if 'EXTRUDER' in params %}
      {% set ext = params.EXTRUDER|default(EXTRUDER) %}
      {% if ext == "extruder"%}
        {action_respond_info("Switching to extruder.")}
        T0
      {% elif ext == "belted_extruder" %}
        {action_respond_info("Switching to belted_extruder.")}
        T1
      {% else %}
        {action_respond_info("EXTRUDER value being passed.")}
        ACTIVATE_EXTRUDER_BASE EXTRUDER={ext}
      {% endif %}
    {% endif %}


[delayed_gcode activate_default_extruder]
initial_duration: 1
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder

##################################################
# Calibration du PID Buse / Plateau
##################################################

[gcode_macro CALIBRATION_PID_BED]
description: PID Plateau
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  G28
  M106
  G1 Z50 F1500
  RESPOND MSG="PID du plateau en cours..."
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(60)}
  G28
  SAVE_CONFIG
  {% endif %}


[gcode_macro CALIBRATION_PID_HOTEND]
description: PID Hotend
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  G28
  M106
  G1 Z50 F1500
  RESPOND MSG="PID de la buse en cours..."
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(200)}
  G28
  SAVE_CONFIG
  {% endif %}

#[gcode_macro M900]
#gcode:
#  {% if 'K' in params %}
#    {% if 'E' in params %}
#      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
#    {% else %}
#      SET_PRESSURE_ADVANCE ADVANCE={params.K}
#    {% endif %}
#  {% endif %}

##################################################
# Sauvegarde des paramètres
##################################################

[gcode_macro SAUVEGARDER]
description: Sauvegarder la configuration
gcode:
  SAVE_CONFIG

##################################################
# Managing Slicer Controls
##################################################

[gcode_macro M201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set accel = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}


[gcode_macro M203]
description: Sets maximum velocity
  Usage: M203 [X<speed>] [Y<speed>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set speed = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}


[gcode_macro M204]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% endif %}


[gcode_macro M205]
description: Sets square corner velocity
  Usage: M205 [X<corner_speed>] [Y<corner_speed>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set corner_speed = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}

##################################################
# Verifications and Measurements with ADXL
##################################################

[gcode_macro ADXL_TEST]
description: ADXL Test
gcode:
  ACCELEROMETER_QUERY


[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE


[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=X


[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=Y

[gcode_macro BED_MESH_CALIBRATE]
description: custom overwrite of the base BED_MESH_CALIBRATE function
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  BED_MESH_CLEAR
  G28
  BED_MESH_CALIBRATE_BASE {rawparams} 
